// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Init
	Handshake
	ConfirmHandshake
*/
package message

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Init struct {
	PubKey           []byte  `protobuf:"bytes,1,req" json:"PubKey,omitempty"`
	Nonce            []byte  `protobuf:"bytes,2,req" json:"Nonce,omitempty"`
	SupportedCurves  *string `protobuf:"bytes,3,req" json:"SupportedCurves,omitempty"`
	SupportedHashes  *string `protobuf:"bytes,4,req" json:"SupportedHashes,omitempty"`
	SupportedCiphers *string `protobuf:"bytes,5,req" json:"SupportedCiphers,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Init) Reset()         { *m = Init{} }
func (m *Init) String() string { return proto.CompactTextString(m) }
func (*Init) ProtoMessage()    {}

func (m *Init) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Init) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Init) GetSupportedCurves() string {
	if m != nil && m.SupportedCurves != nil {
		return *m.SupportedCurves
	}
	return ""
}

func (m *Init) GetSupportedHashes() string {
	if m != nil && m.SupportedHashes != nil {
		return *m.SupportedHashes
	}
	return ""
}

func (m *Init) GetSupportedCiphers() string {
	if m != nil && m.SupportedCiphers != nil {
		return *m.SupportedCiphers
	}
	return ""
}

type Handshake struct {
	EphemeralPubKey  []byte `protobuf:"bytes,1,req" json:"EphemeralPubKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Handshake) Reset()         { *m = Handshake{} }
func (m *Handshake) String() string { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()    {}

func (m *Handshake) GetEphemeralPubKey() []byte {
	if m != nil {
		return m.EphemeralPubKey
	}
	return nil
}

type ConfirmHandshake struct {
	Nonce     []byte `protobuf:"bytes,1,req" json:"Nonce,omitempty"`
	Signature []byte `protobuf:"bytes,2,req" json:"Signature,omitempty"`
	// Address this node is listening on.
	ListenAddress *string `protobuf:"bytes,3,req" json:"ListenAddress,omitempty"`
	// Apparent address of the other side of the connection.
	ConnectionAddress *string `protobuf:"bytes,4,req" json:"ConnectionAddress,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *ConfirmHandshake) Reset()         { *m = ConfirmHandshake{} }
func (m *ConfirmHandshake) String() string { return proto.CompactTextString(m) }
func (*ConfirmHandshake) ProtoMessage()    {}

func (m *ConfirmHandshake) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *ConfirmHandshake) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConfirmHandshake) GetListenAddress() string {
	if m != nil && m.ListenAddress != nil {
		return *m.ListenAddress
	}
	return ""
}

func (m *ConfirmHandshake) GetConnectionAddress() string {
	if m != nil && m.ConnectionAddress != nil {
		return *m.ConnectionAddress
	}
	return ""
}
